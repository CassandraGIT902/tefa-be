datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ProdukType {
  Food
  Beverage
}

enum OrderStatus {
  Pending
  Processing
  Ready
  Completed
  Cancelled
}

enum QRCodeStatus {
  active
  expired
}

enum Role {
  ADMIN
  SELLER
  USER
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  name         String?
  password     String
  role         Role       @default(USER)
  refreshToken String?
  Token        Token[]
  orders       Order[]
  cart         Cart?      @relation
  cartId       Int?
  favorites    Favorite[]

  // Informasi tambahan untuk seller
  verified Boolean   @default(false) // Apakah seller sudah diverifikasi
  rating   Float? // Rating seller
  joinedAt DateTime? @default(now()) // Tanggal bergabung
  toko     Toko?     @relation // Tambahkan field ini untuk relasi ke Toko
  deliveries       Delivery[]
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Delivery {
  id          Int      @id @default(autoincrement())
  status      String   @default("Pending") // Pending, Delivered, etc.
  address     String
  totalPrice  Float
  user        User     @relation(fields: [userId], references: [id])
  userId      String   // Ubah tipe data dari Int ke String
  toko        Toko     @relation(fields: [tokoId], references: [tokoId])
  tokoId      String   // Ubah tipe data dari Int ke String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Produk {
  id         Int         @id @default(autoincrement())
  title      String
  price      Float
  imgUrl     String
  type       ProdukType
  tokoId     String
  toko       Toko?       @relation(fields: [tokoId], references: [tokoId], onDelete: Cascade)
  tokoName   String?
  orderItems OrderItem[]
  inventory  Inventory?
  quantity   Int?
  cartItems  CartItem[]
}

model Toko {
  tokoId    String     @id @default(uuid())
  name      String     @unique
  desc      String?
  produk    Produk[]
  cartItems CartItem[]
  favorite  Favorite[]
  scanners  Scanner[]
  orders    Order[]
  adminFee  Float?

  verified Boolean @default(false) // Apakah toko sudah diverifikasi
  rating   Float? // Rating toko

  // Definisi relasi ke User
  seller   User   @relation(fields: [sellerId], references: [id]) // Hanya di sini
  sellerId String @unique // Harus unik jika satu seller untuk satu toko
  deliveries  Delivery[]
}

model Order {
  orderId   String               @id @default(uuid())
  user      User                 @relation(fields: [userId], references: [id])
  userId    String
  status    OrderStatus          @default(Pending)
  total     Float
  items     OrderItem[]
  toko      Toko                 @relation(fields: [tokoId], references: [tokoId])
  tokoId    String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  qrCodes   QRCode[] // One-to-many relation with QRCode
  history   TransactionHistory[] // One-to-many relation with TransactionHistory
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  order    Order  @relation(fields: [orderId], references: [orderId])
  orderId  String
  produk   Produk @relation(fields: [produkId], references: [id], onDelete: Cascade)
  produkId Int
  quantity Int
  price    Float
}

model Cart {
  id     Int        @id @default(autoincrement())
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique
  items  CartItem[]
}

model CartItem {
  id       Int    @id @default(autoincrement())
  cartId   Int
  cart     Cart   @relation(fields: [cartId], references: [id])
  produkId Int
  produk   Produk @relation(fields: [produkId], references: [id], onDelete: Cascade)
  quantity Int
  tokoId   String
  toko     Toko   @relation(fields: [tokoId], references: [tokoId])
}

model Inventory {
  id       Int    @id @default(autoincrement())
  produk   Produk @relation(fields: [produkId], references: [id], onDelete: Cascade)
  produkId Int    @unique
  quantity Int
}

model Favorite {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  toko   Toko   @relation(fields: [tokoId], references: [tokoId])
  tokoId String
  favId  Int    @unique
}

model QRCode {
  id        Int          @id @default(autoincrement())
  orderId   String       @unique
  qrCodeUrl String       @unique
  expiresAt DateTime
  status    QRCodeStatus
  order     Order        @relation(fields: [orderId], references: [orderId])
}

model Scanner {
  id        Int      @id @default(autoincrement())
  tokoId    String
  scannerId String   @unique
  createdAt DateTime @default(now())

  Vendor Toko @relation(fields: [tokoId], references: [tokoId]) // Relation to Toko model
}

model TransactionHistory {
  id        Int         @id @default(autoincrement())
  order     Order       @relation(fields: [orderId], references: [orderId])
  orderId   String
  status    OrderStatus
  timestamp DateTime    @default(now())
}

model Config {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Float
  createdAt DateTime @default(now())
}
