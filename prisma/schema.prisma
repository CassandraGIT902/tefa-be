datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String        @id @default(uuid())
  email            String        @unique
  name             String?
  password         String
  role             Role       @default(USER)
  refreshToken     String? 
  Token            RefreshToken[]
  orders           Order[]
  cart             Cart?      @relation // No need for `fields` and `references` here
  cartId           Int? // Optional: For the one-to-one relation with Cart
  favorites        Favorite[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Produk {
  id         Int         @id @default(autoincrement())
  title      String
  price      Float
  imgUrl     String
  type       ProdukType
  toko       Toko?       @relation(fields: [tokoId], references: [tokoId])
  tokoId     Int?
  orderItems OrderItem[]
  inventory  Inventory?   // Related inventory
  quantity   Int?         // Direct quantity in Produk model
  cartItems  CartItem[]
}

enum ProdukType {
  Makanan
  Minuman
}

model Toko {
  id       Int        @id @default(autoincrement())
  tokoId   Int        @unique
  name     String
  desc     String?
  produk   Produk[]
  favorite Favorite[]
  scanners Scanner[] // Relation to the Scanner model
  orders   Order[]
}

model Order {
  id        Int                  @id @default(autoincrement())
  user      User                 @relation(fields: [userId], references: [id])
  userId    String
  status    OrderStatus          @default(Pending)
  total     Float
  items     OrderItem[]
  toko      Toko                 @relation(fields: [tokoId], references: [id])
  tokoId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  qrCodes   QRCode[] // One-to-many relation with QRCode
  history   TransactionHistory[] // One-to-many relation with TransactionHistory
}

enum OrderStatus {
  Pending
  Processing
  Ready
  Completed
  Cancelled
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  Int
  produk   Produk @relation(fields: [produkId], references: [id])
  produkId Int
  quantity Int
  price    Float
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique 
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  produkId  Int
  produk    Produk   @relation(fields: [produkId], references: [id])
  quantity  Int
}

model Inventory {
  id       Int    @id @default(autoincrement())
  produk   Produk @relation(fields: [produkId], references: [id])
  produkId Int    @unique
  quantity Int    // Inventory quantity
}

model Favorite {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId String
  toko   Toko @relation(fields: [tokoId], references: [id])
  tokoId Int
  favId  Int  @unique
}

model QRCode {
  id        Int          @id @default(autoincrement())
  orderId   Int          @unique
  qrCodeUrl String       @unique
  expiresAt DateTime
  status    QRCodeStatus
  order     Order        @relation(fields: [orderId], references: [id])
}

enum QRCodeStatus {
  active
  expired
}

model Scanner {
  id        Int      @id @default(autoincrement())
  vendorId  Int
  scannerId String   @unique
  createdAt DateTime @default(now())

  Vendor Toko @relation(fields: [vendorId], references: [id]) // Relation to Toko model
}

model TransactionHistory {
  id        Int         @id @default(autoincrement())
  order     Order       @relation(fields: [orderId], references: [id]) // Foreign key to Order
  orderId   Int
  status    OrderStatus
  timestamp DateTime    @default(now())
}

model Config {
  id        Int      @id @default(autoincrement())
  key       String   @unique 
  value     Float    
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
  MERCHANT
}
